// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class OperatorControl extends CommandBase {


    public OperatorControl() {


        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

        addRequirements(Robot.drivetrain);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        Joystick rightJoystick = Robot.getRightJoystick();
        double x = rightJoystick.getX();
        double y = rightJoystick.getY();
        System.out.println("x:"+x);
        double rot = rightJoystick.getTwist();
        var speeds = ChassisSpeeds.fromFieldRelativeSpeeds(
                        x * Drivetrain.MAX_VELOCITY_METERS_PER_SECOND,
                        y * Drivetrain.MAX_VELOCITY_METERS_PER_SECOND,
                        rot * Drivetrain.MAX_ANGULAR_VELOCITY_RADIANS_PER_SECOND,
                        Robot.drivetrain.getRotation2dReversed()
                );
        Robot.drivetrain.drive(x * Drivetrain.MAX_VELOCITY_METERS_PER_SECOND, y * Drivetrain.MAX_VELOCITY_METERS_PER_SECOND, rot * Drivetrain.MAX_ANGULAR_VELOCITY_RADIANS_PER_SECOND);

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return true;
    }
}
